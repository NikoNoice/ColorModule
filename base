local ColorModule = {}

-- Color Configuration
local ColorConfig = {
    -- Animation settings
    Enabled = true,
    AnimationSpeed = 2, -- Speed multiplier for animations
    
    -- Rainbow settings
    RainbowEnabled = true,
    RainbowSpeed = 1.5, -- How fast colors cycle
    RainbowSaturation = 1, -- Color intensity (0-1)
    RainbowBrightness = 1, -- Color brightness (0-1)
    
    -- Wave settings
    WaveEnabled = true,
    WaveSpeed = 3,
    WaveLength = 2, -- How stretched the wave is
    WaveIntensity = 0.5, -- How much the wave affects the color
    
    -- Pulse settings
    PulseEnabled = true,
    PulseSpeed = 2,
    PulseIntensity = 0.3,
    
    -- Base colors (when animations are disabled)
    BaseBoxColor = Color3.fromRGB(255, 255, 255),
    BaseHealthbarColor = Color3.fromRGB(0, 255, 0),
    BaseTextColor = Color3.fromRGB(255, 255, 255),
    
    -- Color modes
    BoxColorMode = "rainbow", -- "rainbow", "wave", "pulse", "static"
    HealthbarColorMode = "gradient", -- "rainbow", "gradient", "static"
    TextColorMode = "rainbow", -- "rainbow", "static"
    SkeletonColorMode = "rainbow", -- "rainbow", "wave", "static"
    
    -- Advanced settings
    SyncAnimations = false, -- Sync all animations to same timing
    IndividualPlayerColors = true, -- Each player gets different color offset
    DistanceColorEffect = false, -- Color changes based on distance
    
    -- Edge animation settings (the circular motion effect)
    EdgeAnimationEnabled = true,
    EdgeAnimationSpeed = 2,
    EdgeColorSeparation = 0.25, -- How separated the edge colors are (0-1)
}

local startTime = tick()
local playerColorOffsets = {}

-- Utility functions
local function HSVtoRGB(h, s, v)
    local r, g, b
    local i = math.floor(h * 6)
    local f = h * 6 - i
    local p = v * (1 - s)
    local q = v * (1 - f * s)
    local t = v * (1 - (1 - f) * s)
    
    i = i % 6
    
    if i == 0 then
        r, g, b = v, t, p
    elseif i == 1 then
        r, g, b = q, v, p
    elseif i == 2 then
        r, g, b = p, v, t
    elseif i == 3 then
        r, g, b = p, q, v
    elseif i == 4 then
        r, g, b = t, p, v
    elseif i == 5 then
        r, g, b = v, p, q
    end
    
    return Color3.new(r, g, b)
end

local function RGBtoHSV(color)
    local r, g, b = color.R, color.G, color.B
    local max = math.max(r, g, b)
    local min = math.min(r, g, b)
    local h, s, v = 0, 0, max
    
    local d = max - min
    s = max == 0 and 0 or d / max
    
    if max ~= min then
        if max == r then
            h = (g - b) / d + (g < b and 6 or 0)
        elseif max == g then
            h = (b - r) / d + 2
        elseif max == b then
            h = (r - g) / d + 4
        end
        h = h / 6
    end
    
    return h, s, v
end

local function lerpColor(color1, color2, alpha)
    return Color3.new(
        color1.R + (color2.R - color1.R) * alpha,
        color1.G + (color2.G - color1.G) * alpha,
        color1.B + (color2.B - color1.B) * alpha
    )
end

-- Get player-specific color offset
local function getPlayerOffset(player)
    if not ColorConfig.IndividualPlayerColors then
        return 0
    end
    
    if not playerColorOffsets[player] then
        -- Generate consistent offset based on player's name for persistence
        local nameHash = 0
        for i = 1, #player.Name do
            nameHash = nameHash + string.byte(player.Name, i)
        end
        playerColorOffsets[player] = (nameHash % 360) / 360
    end
    
    return playerColorOffsets[player]
end

-- Main color calculation functions
function ColorModule:GetRainbowColor(timeOffset, player)
    timeOffset = timeOffset or 0
    local currentTime = tick() - startTime
    local playerOffset = getPlayerOffset(player)
    
    local hue = ((currentTime * ColorConfig.RainbowSpeed * ColorConfig.AnimationSpeed + timeOffset + playerOffset) % 1)
    
    return HSVtoRGB(hue, ColorConfig.RainbowSaturation, ColorConfig.RainbowBrightness)
end

function ColorModule:GetWaveColor(baseColor, timeOffset, wavePosition, player)
    timeOffset = timeOffset or 0
    wavePosition = wavePosition or 0
    local currentTime = tick() - startTime
    local playerOffset = getPlayerOffset(player)
    
    local wave = math.sin((currentTime * ColorConfig.WaveSpeed * ColorConfig.AnimationSpeed + timeOffset + playerOffset + wavePosition * ColorConfig.WaveLength) * math.pi * 2)
    wave = (wave + 1) / 2 -- Normalize to 0-1
    
    local h, s, v = RGBtoHSV(baseColor)
    h = (h + wave * ColorConfig.WaveIntensity) % 1
    
    return HSVtoRGB(h, s, v)
end

function ColorModule:GetPulseColor(baseColor, timeOffset, player)
    timeOffset = timeOffset or 0
    local currentTime = tick() - startTime
    local playerOffset = getPlayerOffset(player)
    
    local pulse = math.sin((currentTime * ColorConfig.PulseSpeed * ColorConfig.AnimationSpeed + timeOffset + playerOffset) * math.pi * 2)
    pulse = (pulse + 1) / 2 -- Normalize to 0-1
    
    local intensity = 1 - (ColorConfig.PulseIntensity * pulse)
    
    return Color3.new(
        baseColor.R * intensity,
        baseColor.G * intensity,
        baseColor.B * intensity
    )
end

function ColorModule:GetDistanceColor(baseColor, distance, maxDistance)
    if not ColorConfig.DistanceColorEffect then
        return baseColor
    end
    
    local distanceRatio = math.clamp(distance / maxDistance, 0, 1)
    local nearColor = Color3.fromRGB(0, 255, 0) -- Green for close
    local farColor = Color3.fromRGB(255, 0, 0) -- Red for far
    
    return lerpColor(nearColor, farColor, distanceRatio)
end

-- Main color getter functions for ESP elements
function ColorModule:GetBoxColor(player, distance, maxDistance)
    if not ColorConfig.Enabled then
        return ColorConfig.BaseBoxColor
    end
    
    local baseColor = ColorConfig.BaseBoxColor
    local timeOffset = ColorConfig.SyncAnimations and 0 or (getPlayerOffset(player) * 10)
    
    if ColorConfig.BoxColorMode == "rainbow" and ColorConfig.RainbowEnabled then
        baseColor = self:GetRainbowColor(timeOffset, player)
    elseif ColorConfig.BoxColorMode == "wave" and ColorConfig.WaveEnabled then
        baseColor = self:GetWaveColor(baseColor, timeOffset, 0, player)
    elseif ColorConfig.BoxColorMode == "pulse" and ColorConfig.PulseEnabled then
        baseColor = self:GetPulseColor(baseColor, timeOffset, player)
    end
    
    -- Apply distance effect
    return self:GetDistanceColor(baseColor, distance or 0, maxDistance or 1000)
end

function ColorModule:GetHealthbarColor(player, healthPercentage, distance, maxDistance)
    if not ColorConfig.Enabled then
        return ColorConfig.BaseHealthbarColor
    end
    
    local baseColor = ColorConfig.BaseHealthbarColor
    local timeOffset = ColorConfig.SyncAnimations and 0 or (getPlayerOffset(player) * 10)
    
    if ColorConfig.HealthbarColorMode == "rainbow" and ColorConfig.RainbowEnabled then
        baseColor = self:GetRainbowColor(timeOffset, player)
    elseif ColorConfig.HealthbarColorMode == "gradient" then
        -- Health-based gradient (red to green)
        local lowColor = Color3.fromRGB(255, 0, 0)
        local highColor = Color3.fromRGB(0, 255, 0)
        baseColor = lerpColor(lowColor, highColor, healthPercentage)
    end
    
    -- Apply distance effect
    return self:GetDistanceColor(baseColor, distance or 0, maxDistance or 1000)
end

function ColorModule:GetTextColor(player, distance, maxDistance)
    if not ColorConfig.Enabled then
        return ColorConfig.BaseTextColor
    end
    
    local baseColor = ColorConfig.BaseTextColor
    local timeOffset = ColorConfig.SyncAnimations and 0 or (getPlayerOffset(player) * 10)
    
    if ColorConfig.TextColorMode == "rainbow" and ColorConfig.RainbowEnabled then
        baseColor = self:GetRainbowColor(timeOffset, player)
    end
    
    -- Apply distance effect
    return self:GetDistanceColor(baseColor, distance or 0, maxDistance or 1000)
end

function ColorModule:GetSkeletonColor(player, partIndex, distance, maxDistance)
    if not ColorConfig.Enabled then
        return ColorConfig.BaseBoxColor
    end
    
    local baseColor = ColorConfig.BaseBoxColor
    local timeOffset = ColorConfig.SyncAnimations and 0 or ((getPlayerOffset(player) * 10) + (partIndex or 0) * 0.5)
    
    if ColorConfig.SkeletonColorMode == "rainbow" and ColorConfig.RainbowEnabled then
        baseColor = self:GetRainbowColor(timeOffset, player)
    elseif ColorConfig.SkeletonColorMode == "wave" and ColorConfig.WaveEnabled then
        baseColor = self:GetWaveColor(baseColor, timeOffset, partIndex or 0, player)
    end
    
    -- Apply distance effect
    return self:GetDistanceColor(baseColor, distance or 0, maxDistance or 1000)
end

-- Box edge animation
function ColorModule:GetBoxEdgeColors(player, distance, maxDistance)
    if not ColorConfig.Enabled or not ColorConfig.EdgeAnimationEnabled then
        local color = self:GetBoxColor(player, distance, maxDistance)
        return {color, color, color, color} -- Top, Right, Bottom, Left
    end
    
    local currentTime = tick() - startTime
    local playerOffset = getPlayerOffset(player)
    local baseTime = currentTime * ColorConfig.EdgeAnimationSpeed * ColorConfig.AnimationSpeed + (playerOffset * 10)
    
    local colors = {}
    for i = 1, 4 do
        local phaseOffset = (i - 1) * ColorConfig.EdgeColorSeparation -- Configurable phase difference
        local hue = ((baseTime + phaseOffset) % 1)
        colors[i] = HSVtoRGB(hue, ColorConfig.RainbowSaturation, ColorConfig.RainbowBrightness)
        
        -- Apply distance effect
        colors[i] = self:GetDistanceColor(colors[i], distance or 0, maxDistance or 1000)
    end
    
    return colors
end

-- Configuration functions
function ColorModule:UpdateConfig(newConfig)
    for key, value in pairs(newConfig) do
        if ColorConfig[key] ~= nil then
            ColorConfig[key] = value
        end
    end
end

function ColorModule:GetConfig()
    return ColorConfig
end

function ColorModule:SetRainbowSpeed(speed)
    ColorConfig.RainbowSpeed = speed
end

function ColorModule:SetEdgeAnimationSpeed(speed)
    ColorConfig.EdgeAnimationSpeed = speed
end

function ColorModule:EnableRainbow(enabled)
    ColorConfig.RainbowEnabled = enabled
end

function ColorModule:EnableEdgeAnimation(enabled)
    ColorConfig.EdgeAnimationEnabled = enabled
end

function ColorModule:SetIndividualPlayerColors(enabled)
    ColorConfig.IndividualPlayerColors = enabled
end

-- Cleanup function
function ColorModule:CleanupPlayer(player)
    playerColorOffsets[player] = nil
end

-- Reset function
function ColorModule:Reset()
    startTime = tick()
    playerColorOffsets = {}
end

-- Version info
ColorModule.Version = "1.0.0"
ColorModule.Author = "nikonovice"

-- Return the module
return ColorModule
